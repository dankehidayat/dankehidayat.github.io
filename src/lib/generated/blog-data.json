[
  {
    "slug": "energy-monitoring-calibration-linear-regression",
    "title": "Energy Monitoring System Calibration: Linear Regression Approach for Sensor Accuracy",
    "date": "2025-10-14",
    "excerpt": "Improving DHT11 sensor accuracy through linear regression calibration against HTC-1 reference measurements, achieving 0.8°C MAE in temperature and 1.15% MAE in humidity readings.",
    "author": "Danke Hidayat",
    "tags": [
      "iot",
      "data-science",
      "sensor-calibration",
      "linear-regression",
      "python"
    ],
    "categories": [
      "embedded-systems",
      "data-analysis"
    ],
    "labels": [
      "project",
      "tutorial"
    ],
    "content": "\n# Energy Monitoring System Calibration: Linear Regression Approach\n\n## Introduction\n\nIn my ongoing energy monitoring project, accurate room temperature and humidity measurements are crucial for optimizing HVAC system performance and energy consumption. The low-cost DHT11 sensors used in the system required calibration against a professional-grade HTC-1 reference sensor to ensure reliable data collection.\n\n## The Calibration Challenge\n\nThe DHT11 sensor, while cost-effective, exhibited significant measurement errors compared to the HTC-1 reference:\n\n**Pre-Calibration Performance:**\n\n- Temperature MAE: 3.84°C\n- Humidity MAE: 14.18%\n- Temperature Bias: -3.84°C\n- Maximum Error: 4.8°C (temperature), 18% (humidity)\n\nThese errors were unacceptable for energy optimization algorithms that rely on precise environmental data.\n\n## Data Collection Methodology\n\nData was collected simultaneously from both sensors over a 9-hour period, capturing various environmental conditions. The dataset included 19 measurement points across different times of day, with temperature readings ranging from 23.4°C to 27.7°C and humidity readings from 46.8% to 73.8%. This comprehensive sampling ensured the calibration model would be robust across typical operating conditions.\n\n## Linear Regression Model\n\n### Mathematical Foundation\n\nThe calibration uses simple linear regression to map raw sensor readings to calibrated values:\n\n$$\ny_{\\text{calibrated}} = \\beta_1 \\cdot x_{\\text{raw}} + \\beta_0\n$$\n\nWhere:\n\n- $y_{\\text{calibrated}}$ is the calibrated measurement\n- $x_{\\text{raw}}$ is the raw sensor reading\n- $\\beta_1$ is the slope coefficient\n- $\\beta_0$ is the intercept constant\n\n### Temperature Calibration Model\n\nFor temperature calibration, the regression yielded:\n\n$$\ny_{\\text{temp}} = 1.343x - 7.689\n$$\n\n**Model Statistics:**\n\n- R² = 0.881\n- Standard Error = 0.495°C\n- F-statistic = 125.95\n\n### Humidity Calibration Model\n\nFor humidity calibration:\n\n$$\ny_{\\text{humidity}} = 0.914x + 5.127\n$$\n\n**Model Statistics:**\n\n- R² = 0.981\n- Standard Error = 0.951%\n- F-statistic = 899.14\n\n## Performance Evaluation\n\n### Post-Calibration Results\n\nThe linear regression calibration significantly improved measurement accuracy:\n\n**Temperature Performance:**\n\n- MAE: **0.80°C** (improved from 3.84°C)\n- R²: 0.939\n- Bias: +0.75°C\n- Maximum Error: 1.40°C\n\n**Humidity Performance:**\n\n- MAE: **1.15%** (improved from 14.18%)\n- R²: 0.991\n- Bias: -0.6%\n- Maximum Error: 2.2%\n\n### Mean Absolute Error (MAE) Calculation\n\nThe MAE is calculated as:\n\n$$\n\\text{MAE} = \\frac{1}{n} \\sum_{i=1}^{n} |y_{\\text{predicted}} - y_{\\text{actual}}|\n$$\n\nWhere $n$ is the number of samples in the validation dataset.\n\n## Implementation Code\n\n```python\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_absolute_error, r2_score\n\nclass SensorCalibrator:\n    def __init__(self):\n        self.temp_model = LinearRegression()\n        self.humidity_model = LinearRegression()\n\n        # Calibration coefficients from regression analysis\n        self.temp_coef = 1.343379812\n        self.temp_intercept = -7.688931392\n        self.humidity_coef = 0.914240883\n        self.humidity_intercept = 5.127226491\n\n    def calibrate_temperature(self, raw_temp):\n        \"\"\"Calibrate temperature reading using linear regression\"\"\"\n        return self.temp_coef * raw_temp + self.temp_intercept\n\n    def calibrate_humidity(self, raw_humidity):\n        \"\"\"Calibrate humidity reading using linear regression\"\"\"\n        return self.humidity_coef * raw_humidity + self.humidity_intercept\n\n    def evaluate_calibration(self, raw_readings, reference_readings):\n        \"\"\"Evaluate calibration performance\"\"\"\n        calibrated = [self.calibrate_temperature(temp) for temp in raw_readings]\n\n        mae = mean_absolute_error(reference_readings, calibrated)\n        r2 = r2_score(reference_readings, calibrated)\n\n        return {\n            'mae': mae,\n            'r2': r2,\n            'calibrated_readings': calibrated\n        }\n\n# Usage example\ncalibrator = SensorCalibrator()\n\n# Calibrate a new reading\nraw_temp = 25.0\ncalibrated_temp = calibrator.calibrate_temperature(raw_temp)\nprint(f\"Raw: {raw_temp}°C → Calibrated: {calibrated_temp:.2f}°C\")\n```\n\n## Results Visualization\n\nThe calibration significantly improved measurement accuracy across the entire operating range. The scatter plots show excellent linear correlation between calibrated DHT11 readings and HTC-1 reference values.\n\n### Key Improvements:\n\n1. **Temperature Accuracy**: 79% reduction in MAE\n2. **Humidity Accuracy**: 92% reduction in MAE\n3. **Measurement Consistency**: High R² values indicate reliable predictions\n4. **Energy Optimization**: More accurate data for HVAC control algorithms\n\n## Applications in Energy Monitoring\n\nThe calibrated sensors now provide reliable data for:\n\n1. **HVAC Optimization**: Precise temperature control reduces energy waste\n2. **Occupancy Detection**: Accurate environmental changes indicate room usage\n3. **Energy Consumption Analysis**: Correlate environmental conditions with energy usage\n4. **Predictive Maintenance**: Detect abnormal temperature/humidity patterns\n\n## Conclusion\n\nLinear regression provides an effective method for calibrating low-cost environmental sensors. The approach:\n\n- Reduced temperature MAE from 3.84°C to 0.80°C\n- Reduced humidity MAE from 14.18% to 1.15%\n- Maintained computational efficiency for embedded systems\n- Provided mathematically sound calibration with interpretable coefficients\n\nThis calibration enables cost-effective deployment of environmental monitoring systems while maintaining measurement accuracy suitable for energy optimization applications.\n\n**Future Work**: Exploring non-linear calibration models and automated recalibration procedures to account for sensor aging and environmental changes.\n",
    "contentHtml": "<h1>Energy Monitoring System Calibration: Linear Regression Approach</h1><br/>\n<h2>Introduction</h2>\n<p>\nIn my ongoing energy monitoring project, accurate room temperature and humidity measurements are crucial for optimizing HVAC system performance and energy consumption. The low-cost DHT11 sensors used in the system required calibration against a professional-grade HTC-1 reference sensor to ensure reliable data collection.</p><br/>\n<h2>The Calibration Challenge</h2>\n<p>\nThe DHT11 sensor, while cost-effective, exhibited significant measurement errors compared to the HTC-1 reference:</p>\n<p>\n<strong>Pre-Calibration Performance:</strong></p>\n<p>\n<ul><li>Temperature MAE: 3.84°C</p></li>\n<p>- Humidity MAE: 14.18%</p>\n<p>- Temperature Bias: -3.84°C</p>\n<p>- Maximum Error: 4.8°C (temperature), 18% (humidity)</p>\n<p>\nThese errors were unacceptable for energy optimization algorithms that rely on precise environmental data.</p><br/>\n<h2>Data Collection Methodology</h2>\n<p>\nData was collected simultaneously from both sensors over a 9-hour period, capturing various environmental conditions. The dataset included 19 measurement points across different times of day, with temperature readings ranging from 23.4°C to 27.7°C and humidity readings from 46.8% to 73.8%. This comprehensive sampling ensured the calibration model would be robust across typical operating conditions.</p><br/>\n<h2>Linear Regression Model</h2><br/>\n<h3>Mathematical Foundation</h3>\n<p>\nThe calibration uses simple linear regression to map raw sensor readings to calibrated values:</p>\n<p>\n$$</p>\n<p>y_{\\text{calibrated}} = \\beta_1 \\cdot x_{\\text{raw}} + \\beta_0</p>\n<p>$$</p>\n<p>\nWhere:</p>\n<p>\n<li>$y_{\\text{calibrated}}$ is the calibrated measurement</p></li>\n<p>- $x_{\\text{raw}}$ is the raw sensor reading</p>\n<p>- $\\beta_1$ is the slope coefficient</p>\n<p>- $\\beta_0$ is the intercept constant</p><br/>\n<h3>Temperature Calibration Model</h3>\n<p>\nFor temperature calibration, the regression yielded:</p>\n<p>\n$$</p>\n<p>y_{\\text{temp}} = 1.343x - 7.689</p>\n<p>$$</p>\n<p>\n<strong>Model Statistics:</strong></p>\n<p>\n<li>R² = 0.881</p></li>\n<p>- Standard Error = 0.495°C</p>\n<p>- F-statistic = 125.95</p><br/>\n<h3>Humidity Calibration Model</h3>\n<p>\nFor humidity calibration:</p>\n<p>\n$$</p>\n<p>y_{\\text{humidity}} = 0.914x + 5.127</p>\n<p>$$</p>\n<p>\n<strong>Model Statistics:</strong></p>\n<p>\n<li>R² = 0.981</p></li>\n<p>- Standard Error = 0.951%</p>\n<p>- F-statistic = 899.14</p><br/>\n<h2>Performance Evaluation</h2><br/>\n<h3>Post-Calibration Results</h3>\n<p>\nThe linear regression calibration significantly improved measurement accuracy:</p>\n<p>\n<strong>Temperature Performance:</strong></p>\n<p>\n<li>MAE: <strong>0.80°C</strong> (improved from 3.84°C)</p></li>\n<p>- R²: 0.939</p>\n<p>- Bias: +0.75°C</p>\n<p>- Maximum Error: 1.40°C</p>\n<p>\n<strong>Humidity Performance:</strong></p>\n<p>\n<li>MAE: <strong>1.15%</strong> (improved from 14.18%)</p></li>\n<p>- R²: 0.991</p>\n<p>- Bias: -0.6%</p>\n<p>- Maximum Error: 2.2%</p><br/>\n<h3>Mean Absolute Error (MAE) Calculation</h3>\n<p>\nThe MAE is calculated as:</p>\n<p>\n$$</p>\n<p>\\text{MAE} = \\frac{1}{n} \\sum_{i=1}^{n} |y_{\\text{predicted}} - y_{\\text{actual}}|</p>\n<p>$$</p>\n<p>\nWhere $n$ is the number of samples in the validation dataset.</p><br/>\n<h2>Implementation Code</h2>\n<p>\n<pre><code>python</p>\n<p>import numpy as np</p>\n<p>from sklearn.linear_model import LinearRegression</p>\n<p>from sklearn.metrics import mean_absolute_error, r2_score</p>\n<p>\nclass SensorCalibrator:</p>\n<p>    def __init__(self):</p>\n<p>        self.temp_model = LinearRegression()</p>\n<p>        self.humidity_model = LinearRegression()</p>\n<p>\n        # Calibration coefficients from regression analysis</p>\n<p>        self.temp_coef = 1.343379812</p>\n<p>        self.temp_intercept = -7.688931392</p>\n<p>        self.humidity_coef = 0.914240883</p>\n<p>        self.humidity_intercept = 5.127226491</p>\n<p>\n    def calibrate_temperature(self, raw_temp):</p>\n<p>        \"\"\"Calibrate temperature reading using linear regression\"\"\"</p>\n<p>        return self.temp_coef * raw_temp + self.temp_intercept</p>\n<p>\n    def calibrate_humidity(self, raw_humidity):</p>\n<p>        \"\"\"Calibrate humidity reading using linear regression\"\"\"</p>\n<p>        return self.humidity_coef * raw_humidity + self.humidity_intercept</p>\n<p>\n    def evaluate_calibration(self, raw_readings, reference_readings):</p>\n<p>        \"\"\"Evaluate calibration performance\"\"\"</p>\n<p>        calibrated = [self.calibrate_temperature(temp) for temp in raw_readings]</p>\n<p>\n        mae = mean_absolute_error(reference_readings, calibrated)</p>\n<p>        r2 = r2_score(reference_readings, calibrated)</p>\n<p>\n        return {</p>\n<p>            'mae': mae,</p>\n<p>            'r2': r2,</p>\n<p>            'calibrated_readings': calibrated</p>\n<p>        }</p><br/>\n<h1>Usage example</h1>\n<p>calibrator = SensorCalibrator()</p><br/>\n<h1>Calibrate a new reading</h1>\n<p>raw_temp = 25.0</p>\n<p>calibrated_temp = calibrator.calibrate_temperature(raw_temp)</p>\n<p>print(f\"Raw: {raw_temp}°C → Calibrated: {calibrated_temp:.2f}°C\")</p>\n<p></code></pre></p><br/>\n<h2>Results Visualization</h2>\n<p>\nThe calibration significantly improved measurement accuracy across the entire operating range. The scatter plots show excellent linear correlation between calibrated DHT11 readings and HTC-1 reference values.</p><br/>\n<h3>Key Improvements:</h3>\n<p>\n1. <strong>Temperature Accuracy</strong>: 79% reduction in MAE</p>\n<p>2. <strong>Humidity Accuracy</strong>: 92% reduction in MAE</p>\n<p>3. <strong>Measurement Consistency</strong>: High R² values indicate reliable predictions</p>\n<p>4. <strong>Energy Optimization</strong>: More accurate data for HVAC control algorithms</p><br/>\n<h2>Applications in Energy Monitoring</h2>\n<p>\nThe calibrated sensors now provide reliable data for:</p>\n<p>\n1. <strong>HVAC Optimization</strong>: Precise temperature control reduces energy waste</p>\n<p>2. <strong>Occupancy Detection</strong>: Accurate environmental changes indicate room usage</p>\n<p>3. <strong>Energy Consumption Analysis</strong>: Correlate environmental conditions with energy usage</p>\n<p>4. <strong>Predictive Maintenance</strong>: Detect abnormal temperature/humidity patterns</p><br/>\n<h2>Conclusion</h2>\n<p>\nLinear regression provides an effective method for calibrating low-cost environmental sensors. The approach:</p>\n<p>\n<li>Reduced temperature MAE from 3.84°C to 0.80°C</p></li></ul>\n<p>- Reduced humidity MAE from 14.18% to 1.15%</p>\n<p>- Maintained computational efficiency for embedded systems</p>\n<p>- Provided mathematically sound calibration with interpretable coefficients</p>\n<p>\nThis calibration enables cost-effective deployment of environmental monitoring systems while maintaining measurement accuracy suitable for energy optimization applications.</p>\n<p>\n<strong>Future Work</strong>: Exploring non-linear calibration models and automated recalibration procedures to account for sensor aging and environmental changes.</p>"
  }
]