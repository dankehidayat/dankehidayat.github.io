[
  {
    "slug": "energy-monitoring-calibration-linear-regression",
    "title": "Energy Monitoring System Calibration: Linear Regression Approach for Sensor Accuracy",
    "date": "2025-10-14",
    "excerpt": "Improving DHT11 sensor accuracy through linear regression calibration against HTC-1 reference measurements, achieving 0.8°C MAE in temperature and 1.15% MAE in humidity readings.",
    "author": "Danke Hidayat",
    "tags": [
      "iot",
      "data-science",
      "sensor-calibration",
      "linear-regression",
      "python"
    ],
    "categories": [
      "embedded-systems",
      "data-analysis"
    ],
    "labels": [
      "project",
      "tutorial"
    ],
    "content": "\n# Energy Monitoring System Calibration: Linear Regression Approach\n\n## Introduction\n\nIn my ongoing energy monitoring project, accurate room temperature and humidity measurements are crucial for optimizing HVAC system performance and energy consumption. The low-cost DHT11 sensors used in the system required calibration against a professional-grade HTC-1 reference sensor to ensure reliable data collection.\n\n## The Calibration Challenge\n\nThe DHT11 sensor, while cost-effective, exhibited significant measurement errors compared to the HTC-1 reference:\n\n**Pre-Calibration Performance:**\n\n- Temperature MAE: 3.84°C\n- Humidity MAE: 14.18%\n- Temperature Bias: -3.84°C\n- Maximum Error: 4.8°C (temperature), 18% (humidity)\n\nThese errors were unacceptable for energy optimization algorithms that rely on precise environmental data.\n\n## Data Collection Methodology\n\nData was collected simultaneously from both sensors over a 9-hour period, capturing various environmental conditions. The dataset included 19 measurement points across different times of day, with temperature readings ranging from 23.4°C to 27.7°C and humidity readings from 46.8% to 73.8%. This comprehensive sampling ensured the calibration model would be robust across typical operating conditions.\n\n## Linear Regression Model\n\n### Mathematical Foundation\n\nThe calibration uses simple linear regression to map raw sensor readings to calibrated values:\n\n$$\ny_{\\text{calibrated}} = \\beta_1 \\cdot x_{\\text{raw}} + \\beta_0\n$$\n\nWhere:\n\n- $y_{\\text{calibrated}}$ is the calibrated measurement\n- $x_{\\text{raw}}$ is the raw sensor reading\n- $\\beta_1$ is the slope coefficient\n- $\\beta_0$ is the intercept constant\n\n### Temperature Calibration Model\n\nFor temperature calibration, the regression yielded:\n\n$$\ny_{\\text{temp}} = 1.343x - 7.689\n$$\n\n**Model Statistics:**\n\n- R² = 0.881\n- Standard Error = 0.495°C\n- F-statistic = 125.95\n\n### Humidity Calibration Model\n\nFor humidity calibration:\n\n$$\ny_{\\text{humidity}} = 0.914x + 5.127\n$$\n\n**Model Statistics:**\n\n- R² = 0.981\n- Standard Error = 0.951%\n- F-statistic = 899.14\n\n## Performance Evaluation\n\n### Post-Calibration Results\n\nThe linear regression calibration significantly improved measurement accuracy:\n\n**Temperature Performance:**\n\n- MAE: **0.80°C** (improved from 3.84°C)\n- R²: 0.939\n- Bias: +0.75°C\n- Maximum Error: 1.40°C\n\n**Humidity Performance:**\n\n- MAE: **1.15%** (improved from 14.18%)\n- R²: 0.991\n- Bias: -0.6%\n- Maximum Error: 2.2%\n\n### Mean Absolute Error (MAE) Calculation\n\nThe MAE is calculated as:\n\n$$\n\\text{MAE} = \\frac{1}{n} \\sum_{i=1}^{n} |y_{\\text{predicted}} - y_{\\text{actual}}|\n$$\n\nWhere $n$ is the number of samples in the validation dataset.\n\n## Implementation Code\n\n```python\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_absolute_error, r2_score\n\nclass SensorCalibrator:\n    def __init__(self):\n        self.temp_model = LinearRegression()\n        self.humidity_model = LinearRegression()\n\n        # Calibration coefficients from regression analysis\n        self.temp_coef = 1.343379812\n        self.temp_intercept = -7.688931392\n        self.humidity_coef = 0.914240883\n        self.humidity_intercept = 5.127226491\n\n    def calibrate_temperature(self, raw_temp):\n        \"\"\"Calibrate temperature reading using linear regression\"\"\"\n        return self.temp_coef * raw_temp + self.temp_intercept\n\n    def calibrate_humidity(self, raw_humidity):\n        \"\"\"Calibrate humidity reading using linear regression\"\"\"\n        return self.humidity_coef * raw_humidity + self.humidity_intercept\n\n    def evaluate_calibration(self, raw_readings, reference_readings):\n        \"\"\"Evaluate calibration performance\"\"\"\n        calibrated = [self.calibrate_temperature(temp) for temp in raw_readings]\n\n        mae = mean_absolute_error(reference_readings, calibrated)\n        r2 = r2_score(reference_readings, calibrated)\n\n        return {\n            'mae': mae,\n            'r2': r2,\n            'calibrated_readings': calibrated\n        }\n\n# Usage example\ncalibrator = SensorCalibrator()\n\n# Calibrate a new reading\nraw_temp = 25.0\ncalibrated_temp = calibrator.calibrate_temperature(raw_temp)\nprint(f\"Raw: {raw_temp}°C → Calibrated: {calibrated_temp:.2f}°C\")\n```\n\n## Results Visualization\n\nThe calibration significantly improved measurement accuracy across the entire operating range. The scatter plots show excellent linear correlation between calibrated DHT11 readings and HTC-1 reference values.\n\n### Key Improvements:\n\n1. **Temperature Accuracy**: 79% reduction in MAE\n2. **Humidity Accuracy**: 92% reduction in MAE\n3. **Measurement Consistency**: High R² values indicate reliable predictions\n4. **Energy Optimization**: More accurate data for HVAC control algorithms\n\n## Applications in Energy Monitoring\n\nThe calibrated sensors now provide reliable data for:\n\n1. **HVAC Optimization**: Precise temperature control reduces energy waste\n2. **Occupancy Detection**: Accurate environmental changes indicate room usage\n3. **Energy Consumption Analysis**: Correlate environmental conditions with energy usage\n4. **Predictive Maintenance**: Detect abnormal temperature/humidity patterns\n\n## Conclusion\n\nLinear regression provides an effective method for calibrating low-cost environmental sensors. The approach:\n\n- Reduced temperature MAE from 3.84°C to 0.80°C\n- Reduced humidity MAE from 14.18% to 1.15%\n- Maintained computational efficiency for embedded systems\n- Provided mathematically sound calibration with interpretable coefficients\n\nThis calibration enables cost-effective deployment of environmental monitoring systems while maintaining measurement accuracy suitable for energy optimization applications.\n\n**Future Work**: Exploring non-linear calibration models and automated recalibration procedures to account for sensor aging and environmental changes.\n",
    "contentHtml": "<h1>Energy Monitoring System Calibration: Linear Regression Approach</h1><br/>\n<h2>Introduction</h2>\n<p>\nIn my ongoing energy monitoring project, accurate room temperature and humidity measurements are crucial for optimizing HVAC system performance and energy consumption. The low-cost DHT11 sensors used in the system required calibration against a professional-grade HTC-1 reference sensor to ensure reliable data collection.</p><br/>\n<h2>The Calibration Challenge</h2>\n<p>\nThe DHT11 sensor, while cost-effective, exhibited significant measurement errors compared to the HTC-1 reference:</p>\n<p>\n<strong>Pre-Calibration Performance:</strong></p>\n<p>\n<ul><li>Temperature MAE: 3.84°C</p></li>\n<p>- Humidity MAE: 14.18%</p>\n<p>- Temperature Bias: -3.84°C</p>\n<p>- Maximum Error: 4.8°C (temperature), 18% (humidity)</p>\n<p>\nThese errors were unacceptable for energy optimization algorithms that rely on precise environmental data.</p><br/>\n<h2>Data Collection Methodology</h2>\n<p>\nData was collected simultaneously from both sensors over a 9-hour period, capturing various environmental conditions. The dataset included 19 measurement points across different times of day, with temperature readings ranging from 23.4°C to 27.7°C and humidity readings from 46.8% to 73.8%. This comprehensive sampling ensured the calibration model would be robust across typical operating conditions.</p><br/>\n<h2>Linear Regression Model</h2><br/>\n<h3>Mathematical Foundation</h3>\n<p>\nThe calibration uses simple linear regression to map raw sensor readings to calibrated values:</p>\n<p>\n$$</p>\n<p>y_{\\text{calibrated}} = \\beta_1 \\cdot x_{\\text{raw}} + \\beta_0</p>\n<p>$$</p>\n<p>\nWhere:</p>\n<p>\n<li>$y_{\\text{calibrated}}$ is the calibrated measurement</p></li>\n<p>- $x_{\\text{raw}}$ is the raw sensor reading</p>\n<p>- $\\beta_1$ is the slope coefficient</p>\n<p>- $\\beta_0$ is the intercept constant</p><br/>\n<h3>Temperature Calibration Model</h3>\n<p>\nFor temperature calibration, the regression yielded:</p>\n<p>\n$$</p>\n<p>y_{\\text{temp}} = 1.343x - 7.689</p>\n<p>$$</p>\n<p>\n<strong>Model Statistics:</strong></p>\n<p>\n<li>R² = 0.881</p></li>\n<p>- Standard Error = 0.495°C</p>\n<p>- F-statistic = 125.95</p><br/>\n<h3>Humidity Calibration Model</h3>\n<p>\nFor humidity calibration:</p>\n<p>\n$$</p>\n<p>y_{\\text{humidity}} = 0.914x + 5.127</p>\n<p>$$</p>\n<p>\n<strong>Model Statistics:</strong></p>\n<p>\n<li>R² = 0.981</p></li>\n<p>- Standard Error = 0.951%</p>\n<p>- F-statistic = 899.14</p><br/>\n<h2>Performance Evaluation</h2><br/>\n<h3>Post-Calibration Results</h3>\n<p>\nThe linear regression calibration significantly improved measurement accuracy:</p>\n<p>\n<strong>Temperature Performance:</strong></p>\n<p>\n<li>MAE: <strong>0.80°C</strong> (improved from 3.84°C)</p></li>\n<p>- R²: 0.939</p>\n<p>- Bias: +0.75°C</p>\n<p>- Maximum Error: 1.40°C</p>\n<p>\n<strong>Humidity Performance:</strong></p>\n<p>\n<li>MAE: <strong>1.15%</strong> (improved from 14.18%)</p></li>\n<p>- R²: 0.991</p>\n<p>- Bias: -0.6%</p>\n<p>- Maximum Error: 2.2%</p><br/>\n<h3>Mean Absolute Error (MAE) Calculation</h3>\n<p>\nThe MAE is calculated as:</p>\n<p>\n$$</p>\n<p>\\text{MAE} = \\frac{1}{n} \\sum_{i=1}^{n} |y_{\\text{predicted}} - y_{\\text{actual}}|</p>\n<p>$$</p>\n<p>\nWhere $n$ is the number of samples in the validation dataset.</p><br/>\n<h2>Implementation Code</h2>\n<p>\n<pre><code>python</p>\n<p>import numpy as np</p>\n<p>from sklearn.linear_model import LinearRegression</p>\n<p>from sklearn.metrics import mean_absolute_error, r2_score</p>\n<p>\nclass SensorCalibrator:</p>\n<p>    def __init__(self):</p>\n<p>        self.temp_model = LinearRegression()</p>\n<p>        self.humidity_model = LinearRegression()</p>\n<p>\n        # Calibration coefficients from regression analysis</p>\n<p>        self.temp_coef = 1.343379812</p>\n<p>        self.temp_intercept = -7.688931392</p>\n<p>        self.humidity_coef = 0.914240883</p>\n<p>        self.humidity_intercept = 5.127226491</p>\n<p>\n    def calibrate_temperature(self, raw_temp):</p>\n<p>        \"\"\"Calibrate temperature reading using linear regression\"\"\"</p>\n<p>        return self.temp_coef * raw_temp + self.temp_intercept</p>\n<p>\n    def calibrate_humidity(self, raw_humidity):</p>\n<p>        \"\"\"Calibrate humidity reading using linear regression\"\"\"</p>\n<p>        return self.humidity_coef * raw_humidity + self.humidity_intercept</p>\n<p>\n    def evaluate_calibration(self, raw_readings, reference_readings):</p>\n<p>        \"\"\"Evaluate calibration performance\"\"\"</p>\n<p>        calibrated = [self.calibrate_temperature(temp) for temp in raw_readings]</p>\n<p>\n        mae = mean_absolute_error(reference_readings, calibrated)</p>\n<p>        r2 = r2_score(reference_readings, calibrated)</p>\n<p>\n        return {</p>\n<p>            'mae': mae,</p>\n<p>            'r2': r2,</p>\n<p>            'calibrated_readings': calibrated</p>\n<p>        }</p><br/>\n<h1>Usage example</h1>\n<p>calibrator = SensorCalibrator()</p><br/>\n<h1>Calibrate a new reading</h1>\n<p>raw_temp = 25.0</p>\n<p>calibrated_temp = calibrator.calibrate_temperature(raw_temp)</p>\n<p>print(f\"Raw: {raw_temp}°C → Calibrated: {calibrated_temp:.2f}°C\")</p>\n<p></code></pre></p><br/>\n<h2>Results Visualization</h2>\n<p>\nThe calibration significantly improved measurement accuracy across the entire operating range. The scatter plots show excellent linear correlation between calibrated DHT11 readings and HTC-1 reference values.</p><br/>\n<h3>Key Improvements:</h3>\n<p>\n1. <strong>Temperature Accuracy</strong>: 79% reduction in MAE</p>\n<p>2. <strong>Humidity Accuracy</strong>: 92% reduction in MAE</p>\n<p>3. <strong>Measurement Consistency</strong>: High R² values indicate reliable predictions</p>\n<p>4. <strong>Energy Optimization</strong>: More accurate data for HVAC control algorithms</p><br/>\n<h2>Applications in Energy Monitoring</h2>\n<p>\nThe calibrated sensors now provide reliable data for:</p>\n<p>\n1. <strong>HVAC Optimization</strong>: Precise temperature control reduces energy waste</p>\n<p>2. <strong>Occupancy Detection</strong>: Accurate environmental changes indicate room usage</p>\n<p>3. <strong>Energy Consumption Analysis</strong>: Correlate environmental conditions with energy usage</p>\n<p>4. <strong>Predictive Maintenance</strong>: Detect abnormal temperature/humidity patterns</p><br/>\n<h2>Conclusion</h2>\n<p>\nLinear regression provides an effective method for calibrating low-cost environmental sensors. The approach:</p>\n<p>\n<li>Reduced temperature MAE from 3.84°C to 0.80°C</p></li></ul>\n<p>- Reduced humidity MAE from 14.18% to 1.15%</p>\n<p>- Maintained computational efficiency for embedded systems</p>\n<p>- Provided mathematically sound calibration with interpretable coefficients</p>\n<p>\nThis calibration enables cost-effective deployment of environmental monitoring systems while maintaining measurement accuracy suitable for energy optimization applications.</p>\n<p>\n<strong>Future Work</strong>: Exploring non-linear calibration models and automated recalibration procedures to account for sensor aging and environmental changes.</p>"
  },
  {
    "slug": "mamdani-fuzzy-logic-iot-energy-monitoring",
    "title": "Implementing Mamdani Fuzzy Logic for Real-Time IoT-Based Electrical Energy and Room Temperature Monitoring",
    "date": "2025-10-13",
    "excerpt": "A comprehensive implementation of Mamdani fuzzy logic for intelligent energy monitoring, achieving 99.88% sensor accuracy and real-time classification with mathematical rigor.",
    "author": "Danke Hidayat",
    "tags": [
      "fuzzy-logic",
      "iot",
      "energy-monitoring",
      "sensor-calibration",
      "mathematical-modeling",
      "embedded-systems"
    ],
    "categories": [
      "research",
      "embedded-systems",
      "data-analysis"
    ],
    "labels": [
      "project",
      "technical-deep-dive",
      "research-paper"
    ],
    "content": "\n# Implementing Mamdani Fuzzy Logic for Real-Time IoT-Based Electrical Energy and Room Temperature Monitoring\n\n## Introduction: The Critical Need for Energy Monitoring in Modern Indonesia\n\nElectricity has evolved from early experiments in the 17th century to become the backbone of modern civilization. From William Gilbert's pioneering work to Michael Faraday's electromagnetic discoveries and Nikola Tesla's alternating current systems, electricity has powered industrial revolutions and transformed human existence. Today, it supports everything from household appliances to industrial operations and emerging technologies like renewable energy and smart grids.\n\nIndonesia faces a particularly pressing energy challenge. As the largest electricity consumer in ASEAN, the country accounts for 36% of regional energy demand and consumes 66% more energy than Thailand. This high consumption is driven by rapid economic growth, urbanization, and industrialization. With projections indicating Indonesia's population could reach 381 million by 2045, the strain on energy resources is becoming increasingly severe.\n\nThe situation is exacerbated by significant energy waste in public sectors such as healthcare facilities, educational institutions, and office buildings. While Indonesia has made strides in renewable energy—exemplified by the 145 MW Cirata Floating Solar Power Plant, a collaboration between PT. PLN and Masdar—household electricity consumption remains high due to extensive use of electronic devices.\n\n## Mathematical Foundation of Sensor Calibration and Accuracy Assessment\n\n### Sensor Error Calculation Methodology\n\nThe accuracy of sensor measurements was rigorously evaluated using mathematical error analysis. The percentage error for each sensor reading was calculated using the formula:\n\n$$\n\\text{Error} (\\%) = \\frac{\\text{Sensor Value} - \\text{Reference Value}}{\\text{Reference Value}} \\times 100\n$$\n\nThe average error across multiple trials was determined by:\n\n$$\n\\text{Average Error} (\\%) = \\frac{\\sum \\text{Error}}{\\text{Number of Trials}}\n$$\n\nAccording to research by Sinaga and Irawati (2018), the accuracy of a measurement technique is inversely proportional to the Mean Absolute Percentage Error (MAPE) and directly proportional to Mean Absolute Error (MAE). Lower MAPE values and smaller MAE indicate higher accuracy levels.\n\n### DHT-11 Sensor Performance Analysis\n\nThe DHT-11 temperature sensor demonstrated exceptional performance with an average error of only 0.11% for temperature measurements and 0.15% for relative humidity. This translates to accuracy levels of 99.88% for temperature and 99.84% for humidity.\n\nThe mathematical relationship between error and accuracy can be expressed as:\n\n$$\n\\text{Accuracy} (\\%) = 100\\% - \\text{Error} (\\%)\n$$\n\nFor temperature measurements:\n\n$$\n\\text{Temperature Accuracy} = 100\\% - 0.11\\% = 99.89\\%\n$$\n\nFor humidity measurements:\n\n$$\n\\text{Humidity Accuracy} = 100\\% - 0.15\\% = 99.85\\%\n$$\n\n### Electrical Parameter Analysis and Power Factor Calculations\n\nThe comprehensive electrical monitoring revealed critical insights into system efficiency. The power factor, a crucial indicator of electrical system efficiency, was calculated using the relationship between active power (P), apparent power (S), and reactive power (Q):\n\n$$\n\\text{Power Factor} = \\cos \\phi = \\frac{P}{S}\n$$\n\nWhere:\n\n- Active Power (P) = 30.83 W\n- Apparent Power (S) = 56.87 VA\n- Reactive Power (Q) = 47.13 VAR\n\nThe power factor calculation:\n\n$$\n\\text{Power Factor} = \\frac{30.83}{56.87} = 0.542\n$$\n\nThis low power factor indicates significant inefficiency, with only 54.2% of the apparent power being converted to useful work. The relationship between these power components follows the power triangle:\n\n$$\nS = \\sqrt{P^2 + Q^2} = \\sqrt{30.83^2 + 47.13^2} = 56.87 \\text{ VA}\n$$\n\n## Mamdani Fuzzy Logic System: Mathematical Implementation\n\n### Membership Function Formulation\n\nThe electrical monitoring system implements a sophisticated four-input, one-output Mamdani fuzzy logic system. Each input variable uses trapezoidal membership functions defined mathematically as:\n\nFor a trapezoidal membership function with parameters [a, b, c, d]:\n\n$$\n\\mu(x) = \\max\\left(\\min\\left(\\frac{x-a}{b-a}, 1, \\frac{d-x}{d-c}\\right), 0\\right)\n$$\n\n**AC Current Membership Functions:**\n\n- Low: [0, 0, 2, 5]\n- Medium: [4, 8, 12, 15]\n- High: [14.5, 20.5, 101, 101]\n\n**AC Power Membership Functions:**\n\n- Low: [0, 60, 300, 600]\n- Medium: [805.4, 925.4, 1825, 2425]\n- High: [1920, 2880, 3120, 4080]\n\n**Reactive Power Membership Functions:**\n\n- Low: [0, 0, 240, 600]\n- Medium: [480, 960, 1800, 2400]\n- High: [1800, 2500, 3000, 3000]\n\n**Power Factor Membership Functions:**\n\n- Poor: [0, 0, 0.5, 0.7]\n- Adequate: [0.65, 0.75, 0.8, 0.85]\n- Good: [0.83, 0.9, 1, 1]\n\n### Output Variable and Defuzzification\n\nThe output variable Load_Status uses three trapezoidal membership functions:\n\n- Normal: [-0.1, 0, 0, 0.1]\n- Warning: [0.9, 1, 1, 1.1]\n- Overload: [1.9, 2, 2, 2.1]\n\nThe defuzzification process uses the centroid method to convert fuzzy sets to crisp outputs:\n\n$$\n\\text{Crisp Output} = \\frac{\\int \\mu(x) \\cdot x \\, dx}{\\int \\mu(x) \\, dx}\n$$\n\n### Temperature Classification System\n\nThe temperature monitoring system uses a single-input Mamdani fuzzy system with three membership functions:\n\n**Temperature Input Membership Functions:**\n\n- Cold: [0, 0, 20, 20] (0-20°C)\n- Normal: [20, 20, 30, 30] (20-30°C)\n- Hot: [30, 30, 40, 40] (30-40°C)\n\n**Output Categories:**\n\n- Cold: 0\n- Normal: 1\n- Hot: 2\n\n### Fuzzy Rule Base Mathematical Representation\n\nThe system implements eleven fuzzy rules combining the four input variables. Each rule follows the structure:\n\n**Rule i:** IF AC_Current IS A_i AND AC_Power IS B_i AND Reactive_Power IS C_i AND Cos_Phi IS D_i THEN Load_Status IS E_i\n\nWhere A_i, B_i, C_i, D_i are fuzzy sets for the respective inputs, and E_i is the fuzzy set for the output.\n\nExample rules include:\n\n- Rule 1: IF Current IS Low AND Power IS Low AND Reactive_Power IS Low AND Cos_Phi IS Good THEN Status IS Normal\n- Rule 8: IF Current IS Medium AND Power IS High AND Reactive_Power IS High AND Cos_Phi IS Poor THEN Status IS Warning\n- Rule 11: IF Current IS High AND Power IS High AND Reactive_Power IS High AND Cos_Phi IS Poor THEN Status IS Overload\n\n### Fuzzy Inference Process\n\nThe Mamdani inference method involves four key steps:\n\n1. **Fuzzification**: Convert crisp inputs to fuzzy sets using membership functions\n\n   $$\n   \\mu_{\\text{Low}}^{\\text{Current}}(x) = \\max\\left(\\min\\left(\\frac{x-0}{2-0}, 1, \\frac{5-x}{5-2}\\right), 0\\right)\n   $$\n\n2. **Rule Evaluation**: Apply fuzzy operators (AND typically uses minimum)\n\n   $$\n   \\alpha_i = \\min(\\mu_{A_i}(x_1), \\mu_{B_i}(x_2), \\mu_{C_i}(x_3), \\mu_{D_i}(x_4))\n   $$\n\n3. **Aggregation**: Combine output fuzzy sets using maximum operator\n\n   $$\n   \\mu_{\\text{aggregated}}(y) = \\max_i (\\min(\\alpha_i, \\mu_{E_i}(y)))\n   $$\n\n4. **Defuzzification**: Convert fuzzy output to crisp value using centroid method\n\n## System Performance and Latency Analysis\n\n### Real-Time Processing Efficiency\n\nThe system demonstrated exceptional real-time performance with end-to-end latency measurements consistently below 2 seconds. This includes:\n\n- Sensor data acquisition and preprocessing\n- Fuzzy logic inference computation\n- Data transmission via HTTP protocol\n- Mobile application display updates\n\nThe latency can be mathematically expressed as:\n\n$$\nT_{\\text{total}} = T_{\\text{sensor}} + T_{\\text{processing}} + T_{\\text{transmission}} + T_{\\text{display}} < 2\\text{s}\n$$\n\nWhere:\n\n- $T_{\\text{sensor}}$: Sensor reading and local processing time\n- $T_{\\text{processing}}$: Fuzzy logic computation time\n- $T_{\\text{transmission}}$: Network transmission latency\n- $T_{\\text{display}}$: Mobile application rendering time\n\n### Energy Efficiency Calculations\n\nThe system identified significant energy inefficiency through power factor analysis. The poor power factor of 0.53 indicates substantial reactive power consumption. The required capacitor bank for power factor correction can be calculated using:\n\n$$\nQ_c = P \\times (\\tan \\phi_1 - \\tan \\phi_2)\n$$\n\nWhere:\n\n- $Q_c$: Required capacitor reactive power (VAR)\n- $P$: Active power (30.83 W)\n- $\\phi_1$: Current phase angle ($\\cos^{-1}(0.53) = 58°$)\n- $\\phi_2$: Desired phase angle (targeting $\\cos^{-1}(0.95) = 18°$)\n\nCalculation:\n\n$$\nQ_c = 30.83 \\times (\\tan 58° - \\tan 18°) = 30.83 \\times (1.600 - 0.325) = 39.3 \\text{ VAR}\n$$\n\n## Conclusions and Mathematical Insights\n\nThe research successfully demonstrates an IoT-based prototype for real-time monitoring of electrical energy and room temperature using Mamdani fuzzy logic. Key mathematical achievements include:\n\n- **Sensor Accuracy**: DHT-11 sensor with 99.88% temperature accuracy and 99.84% humidity accuracy, mathematically verified through error analysis\n- **Electrical Efficiency**: Identified 46.8% power factor inefficiency through comprehensive power triangle analysis\n- **Fuzzy Logic Performance**: Implemented 11-rule fuzzy inference system with precise mathematical membership functions\n- **Real-Time Processing**: Achieved sub-2-second latency across the complete data pipeline\n\nThe mathematical framework provides a solid foundation for future enhancements, including:\n\n- Adaptive fuzzy systems with self-tuning membership functions\n- Machine learning integration for predictive maintenance\n- Multi-objective optimization for energy efficiency\n\nThis research establishes that mathematical rigor combined with fuzzy logic principles can create intelligent energy management systems capable of adapting to dynamic environmental conditions while maintaining computational efficiency suitable for embedded IoT applications.\n\n_Research conducted September 2024 - July 2025 at PT. Global Kreatif Inovasi, Jakarta_\n",
    "contentHtml": "<h1>Implementing Mamdani Fuzzy Logic for Real-Time IoT-Based Electrical Energy and Room Temperature Monitoring</h1><br/>\n<h2>Introduction: The Critical Need for Energy Monitoring in Modern Indonesia</h2>\n<p>\nElectricity has evolved from early experiments in the 17th century to become the backbone of modern civilization. From William Gilbert's pioneering work to Michael Faraday's electromagnetic discoveries and Nikola Tesla's alternating current systems, electricity has powered industrial revolutions and transformed human existence. Today, it supports everything from household appliances to industrial operations and emerging technologies like renewable energy and smart grids.</p>\n<p>\nIndonesia faces a particularly pressing energy challenge. As the largest electricity consumer in ASEAN, the country accounts for 36% of regional energy demand and consumes 66% more energy than Thailand. This high consumption is driven by rapid economic growth, urbanization, and industrialization. With projections indicating Indonesia's population could reach 381 million by 2045, the strain on energy resources is becoming increasingly severe.</p>\n<p>\nThe situation is exacerbated by significant energy waste in public sectors such as healthcare facilities, educational institutions, and office buildings. While Indonesia has made strides in renewable energy—exemplified by the 145 MW Cirata Floating Solar Power Plant, a collaboration between PT. PLN and Masdar—household electricity consumption remains high due to extensive use of electronic devices.</p><br/>\n<h2>Mathematical Foundation of Sensor Calibration and Accuracy Assessment</h2><br/>\n<h3>Sensor Error Calculation Methodology</h3>\n<p>\nThe accuracy of sensor measurements was rigorously evaluated using mathematical error analysis. The percentage error for each sensor reading was calculated using the formula:</p>\n<p>\n$$</p>\n<p>\\text{Error} (\\%) = \\frac{\\text{Sensor Value} - \\text{Reference Value}}{\\text{Reference Value}} \\times 100</p>\n<p>$$</p>\n<p>\nThe average error across multiple trials was determined by:</p>\n<p>\n$$</p>\n<p>\\text{Average Error} (\\%) = \\frac{\\sum \\text{Error}}{\\text{Number of Trials}}</p>\n<p>$$</p>\n<p>\nAccording to research by Sinaga and Irawati (2018), the accuracy of a measurement technique is inversely proportional to the Mean Absolute Percentage Error (MAPE) and directly proportional to Mean Absolute Error (MAE). Lower MAPE values and smaller MAE indicate higher accuracy levels.</p><br/>\n<h3>DHT-11 Sensor Performance Analysis</h3>\n<p>\nThe DHT-11 temperature sensor demonstrated exceptional performance with an average error of only 0.11% for temperature measurements and 0.15% for relative humidity. This translates to accuracy levels of 99.88% for temperature and 99.84% for humidity.</p>\n<p>\nThe mathematical relationship between error and accuracy can be expressed as:</p>\n<p>\n$$</p>\n<p>\\text{Accuracy} (\\%) = 100\\% - \\text{Error} (\\%)</p>\n<p>$$</p>\n<p>\nFor temperature measurements:</p>\n<p>\n$$</p>\n<p>\\text{Temperature Accuracy} = 100\\% - 0.11\\% = 99.89\\%</p>\n<p>$$</p>\n<p>\nFor humidity measurements:</p>\n<p>\n$$</p>\n<p>\\text{Humidity Accuracy} = 100\\% - 0.15\\% = 99.85\\%</p>\n<p>$$</p><br/>\n<h3>Electrical Parameter Analysis and Power Factor Calculations</h3>\n<p>\nThe comprehensive electrical monitoring revealed critical insights into system efficiency. The power factor, a crucial indicator of electrical system efficiency, was calculated using the relationship between active power (P), apparent power (S), and reactive power (Q):</p>\n<p>\n$$</p>\n<p>\\text{Power Factor} = \\cos \\phi = \\frac{P}{S}</p>\n<p>$$</p>\n<p>\nWhere:</p>\n<p>\n<ul><li>Active Power (P) = 30.83 W</p></li>\n<p>- Apparent Power (S) = 56.87 VA</p>\n<p>- Reactive Power (Q) = 47.13 VAR</p>\n<p>\nThe power factor calculation:</p>\n<p>\n$$</p>\n<p>\\text{Power Factor} = \\frac{30.83}{56.87} = 0.542</p>\n<p>$$</p>\n<p>\nThis low power factor indicates significant inefficiency, with only 54.2% of the apparent power being converted to useful work. The relationship between these power components follows the power triangle:</p>\n<p>\n$$</p>\n<p>S = \\sqrt{P^2 + Q^2} = \\sqrt{30.83^2 + 47.13^2} = 56.87 \\text{ VA}</p>\n<p>$$</p><br/>\n<h2>Mamdani Fuzzy Logic System: Mathematical Implementation</h2><br/>\n<h3>Membership Function Formulation</h3>\n<p>\nThe electrical monitoring system implements a sophisticated four-input, one-output Mamdani fuzzy logic system. Each input variable uses trapezoidal membership functions defined mathematically as:</p>\n<p>\nFor a trapezoidal membership function with parameters [a, b, c, d]:</p>\n<p>\n$$</p>\n<p>\\mu(x) = \\max\\left(\\min\\left(\\frac{x-a}{b-a}, 1, \\frac{d-x}{d-c}\\right), 0\\right)</p>\n<p>$$</p>\n<p>\n<strong>AC Current Membership Functions:</strong></p>\n<p>\n<li>Low: [0, 0, 2, 5]</p></li>\n<p>- Medium: [4, 8, 12, 15]</p>\n<p>- High: [14.5, 20.5, 101, 101]</p>\n<p>\n<strong>AC Power Membership Functions:</strong></p>\n<p>\n<li>Low: [0, 60, 300, 600]</p></li>\n<p>- Medium: [805.4, 925.4, 1825, 2425]</p>\n<p>- High: [1920, 2880, 3120, 4080]</p>\n<p>\n<strong>Reactive Power Membership Functions:</strong></p>\n<p>\n<li>Low: [0, 0, 240, 600]</p></li>\n<p>- Medium: [480, 960, 1800, 2400]</p>\n<p>- High: [1800, 2500, 3000, 3000]</p>\n<p>\n<strong>Power Factor Membership Functions:</strong></p>\n<p>\n<li>Poor: [0, 0, 0.5, 0.7]</p></li>\n<p>- Adequate: [0.65, 0.75, 0.8, 0.85]</p>\n<p>- Good: [0.83, 0.9, 1, 1]</p><br/>\n<h3>Output Variable and Defuzzification</h3>\n<p>\nThe output variable Load_Status uses three trapezoidal membership functions:</p>\n<p>\n<li>Normal: [-0.1, 0, 0, 0.1]</p></li>\n<p>- Warning: [0.9, 1, 1, 1.1]</p>\n<p>- Overload: [1.9, 2, 2, 2.1]</p>\n<p>\nThe defuzzification process uses the centroid method to convert fuzzy sets to crisp outputs:</p>\n<p>\n$$</p>\n<p>\\text{Crisp Output} = \\frac{\\int \\mu(x) \\cdot x \\, dx}{\\int \\mu(x) \\, dx}</p>\n<p>$$</p><br/>\n<h3>Temperature Classification System</h3>\n<p>\nThe temperature monitoring system uses a single-input Mamdani fuzzy system with three membership functions:</p>\n<p>\n<strong>Temperature Input Membership Functions:</strong></p>\n<p>\n<li>Cold: [0, 0, 20, 20] (0-20°C)</p></li>\n<p>- Normal: [20, 20, 30, 30] (20-30°C)</p>\n<p>- Hot: [30, 30, 40, 40] (30-40°C)</p>\n<p>\n<strong>Output Categories:</strong></p>\n<p>\n<li>Cold: 0</p></li>\n<p>- Normal: 1</p>\n<p>- Hot: 2</p><br/>\n<h3>Fuzzy Rule Base Mathematical Representation</h3>\n<p>\nThe system implements eleven fuzzy rules combining the four input variables. Each rule follows the structure:</p>\n<p>\n<strong>Rule i:</strong> IF AC_Current IS A_i AND AC_Power IS B_i AND Reactive_Power IS C_i AND Cos_Phi IS D_i THEN Load_Status IS E_i</p>\n<p>\nWhere A_i, B_i, C_i, D_i are fuzzy sets for the respective inputs, and E_i is the fuzzy set for the output.</p>\n<p>\nExample rules include:</p>\n<p>\n<li>Rule 1: IF Current IS Low AND Power IS Low AND Reactive_Power IS Low AND Cos_Phi IS Good THEN Status IS Normal</p></li>\n<p>- Rule 8: IF Current IS Medium AND Power IS High AND Reactive_Power IS High AND Cos_Phi IS Poor THEN Status IS Warning</p>\n<p>- Rule 11: IF Current IS High AND Power IS High AND Reactive_Power IS High AND Cos_Phi IS Poor THEN Status IS Overload</p><br/>\n<h3>Fuzzy Inference Process</h3>\n<p>\nThe Mamdani inference method involves four key steps:</p>\n<p>\n1. <strong>Fuzzification</strong>: Convert crisp inputs to fuzzy sets using membership functions</p>\n<p>\n   $$</p>\n<p>   \\mu_{\\text{Low}}^{\\text{Current}}(x) = \\max\\left(\\min\\left(\\frac{x-0}{2-0}, 1, \\frac{5-x}{5-2}\\right), 0\\right)</p>\n<p>   $$</p>\n<p>\n2. <strong>Rule Evaluation</strong>: Apply fuzzy operators (AND typically uses minimum)</p>\n<p>\n   $$</p>\n<p>   \\alpha_i = \\min(\\mu_{A_i}(x_1), \\mu_{B_i}(x_2), \\mu_{C_i}(x_3), \\mu_{D_i}(x_4))</p>\n<p>   $$</p>\n<p>\n3. <strong>Aggregation</strong>: Combine output fuzzy sets using maximum operator</p>\n<p>\n   $$</p>\n<p>   \\mu_{\\text{aggregated}}(y) = \\max_i (\\min(\\alpha_i, \\mu_{E_i}(y)))</p>\n<p>   $$</p>\n<p>\n4. <strong>Defuzzification</strong>: Convert fuzzy output to crisp value using centroid method</p><br/>\n<h2>System Performance and Latency Analysis</h2><br/>\n<h3>Real-Time Processing Efficiency</h3>\n<p>\nThe system demonstrated exceptional real-time performance with end-to-end latency measurements consistently below 2 seconds. This includes:</p>\n<p>\n<li>Sensor data acquisition and preprocessing</p></li>\n<p>- Fuzzy logic inference computation</p>\n<p>- Data transmission via HTTP protocol</p>\n<p>- Mobile application display updates</p>\n<p>\nThe latency can be mathematically expressed as:</p>\n<p>\n$$</p>\n<p>T_{\\text{total}} = T_{\\text{sensor}} + T_{\\text{processing}} + T_{\\text{transmission}} + T_{\\text{display}} < 2\\text{s}</p>\n<p>$$</p>\n<p>\nWhere:</p>\n<p>\n<li>$T_{\\text{sensor}}$: Sensor reading and local processing time</p></li>\n<p>- $T_{\\text{processing}}$: Fuzzy logic computation time</p>\n<p>- $T_{\\text{transmission}}$: Network transmission latency</p>\n<p>- $T_{\\text{display}}$: Mobile application rendering time</p><br/>\n<h3>Energy Efficiency Calculations</h3>\n<p>\nThe system identified significant energy inefficiency through power factor analysis. The poor power factor of 0.53 indicates substantial reactive power consumption. The required capacitor bank for power factor correction can be calculated using:</p>\n<p>\n$$</p>\n<p>Q_c = P \\times (\\tan \\phi_1 - \\tan \\phi_2)</p>\n<p>$$</p>\n<p>\nWhere:</p>\n<p>\n<li>$Q_c$: Required capacitor reactive power (VAR)</p></li>\n<p>- $P$: Active power (30.83 W)</p>\n<p>- $\\phi_1$: Current phase angle ($\\cos^{-1}(0.53) = 58°$)</p>\n<p>- $\\phi_2$: Desired phase angle (targeting $\\cos^{-1}(0.95) = 18°$)</p>\n<p>\nCalculation:</p>\n<p>\n$$</p>\n<p>Q_c = 30.83 \\times (\\tan 58° - \\tan 18°) = 30.83 \\times (1.600 - 0.325) = 39.3 \\text{ VAR}</p>\n<p>$$</p><br/>\n<h2>Conclusions and Mathematical Insights</h2>\n<p>\nThe research successfully demonstrates an IoT-based prototype for real-time monitoring of electrical energy and room temperature using Mamdani fuzzy logic. Key mathematical achievements include:</p>\n<p>\n<li><strong>Sensor Accuracy</strong>: DHT-11 sensor with 99.88% temperature accuracy and 99.84% humidity accuracy, mathematically verified through error analysis</p></li>\n<p>- <strong>Electrical Efficiency</strong>: Identified 46.8% power factor inefficiency through comprehensive power triangle analysis</p>\n<p>- <strong>Fuzzy Logic Performance</strong>: Implemented 11-rule fuzzy inference system with precise mathematical membership functions</p>\n<p>- <strong>Real-Time Processing</strong>: Achieved sub-2-second latency across the complete data pipeline</p>\n<p>\nThe mathematical framework provides a solid foundation for future enhancements, including:</p>\n<p>\n<li>Adaptive fuzzy systems with self-tuning membership functions</p></li></ul>\n<p>- Machine learning integration for predictive maintenance</p>\n<p>- Multi-objective optimization for energy efficiency</p>\n<p>\nThis research establishes that mathematical rigor combined with fuzzy logic principles can create intelligent energy management systems capable of adapting to dynamic environmental conditions while maintaining computational efficiency suitable for embedded IoT applications.</p>\n<p>\n_Research conducted September 2024 - July 2025 at PT. Global Kreatif Inovasi, Jakarta_</p>"
  }
]